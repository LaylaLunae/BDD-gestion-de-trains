I-	Choix des classes

GARE 
Adresse : c’est un string comportant un numéro de rue, rue , code postal
Ville : on suppose que 2 villes n’ont pas 2 fois le même nom
Key -> (nom, ville) clé car on suppose que deux gares peuvent avoir le même nom cependant les noms des gars d’une même ville sont différents.
GMT -> une méthode pour l’instant on choisit un domaine de type timezone SELECT CONVERT_TZ(date, @@session.time_zone, '-5:00') FROM GARE ( ressource sur internet que nous exploiteront par la suite)

TAXI/TRANSPORTPUBLIC/HOTEL
Ces classes sont associées à Gare. Chacune de ces classes possède des attributs propre, d’où le choix de faire des classes différentes pour chacune.
Association avec Gare : Une gare dispose de plusieurs hôtels/taxi/Transport ou  aucun à proximité, les taxi/transport dessert les gares.


ARRET LIGNE
Une gare comprend  des arrêts de ligne ou non ( 0..N). En effet, on suppose qu’un train peut s’arrêter à une gare ou non. Une LIGNE se compose de 2 arrêts au minimum ( départ, arrivée)
Le booléen arrive permet d’indiquer si l’arrêt est le dernier de la ligne


/////////////// Association entre Trajet/arretVoyage/ArretLigne/Billet////////////////////////////


CALENDRIER
« Les voyages sont programmés de manière périodique selon un calendrier hebdomadaire ». On choisit d’ajouter la classe Calendrier,  le terme « hebdomadaire » est représenté  par des booléens représentant les jours de la semaine
Exemple : calendrier 1 :-> tous les jours sauf le dimanche 
Pour représenter les dates exceptions (jours fériés par exemple) où on supprime/ajoute des voyages. Cette notion est représentée par une classe ‘DateException’, l’attribut date représente les dates d’exceptions et ajout est un booléen mis à 1 s’il y a ajout de voyage et  0 sinon.
Exemple : le 1er mai le train Paris Compiègne de 10h30 est supprimé
	     Le 1er Janvier, le train Paris-Compiègne est rajouté.

VOYAGEUR
La classe voyageur est abstraite, elle ne sera pas instanciée, l’implémentation se fera dans les classe filles « Regulier » et « Occasionnel »
L’héritage est presque complet.
La clé est (nom, prénom, adresse) on suppose que des voyageurs peuvent avoir le même nom prénom mais adresse différente et c’est 3 champs sont not null.
L’attribut téléphone est un string, en effet, on suppose que le numéro de téléphone peut avoir des indicatifs différents de type « +33, +34, +212… »
L’attribut paiement est de type énumération, on considère qu’il existe 3 modes de paiement : carte, chèque, monnaie. 

Régulier : Statut est une énumération, on suppose qu’il existe 4 statuts : bronze, silver, gold, platine.

BILLET :
Un voyageur possède 0 ou plusieurs billets, et un billet est possédé par un voyageur. En effet, une fois le billet commandé, il est réservé et appartient à quelqu’un.



