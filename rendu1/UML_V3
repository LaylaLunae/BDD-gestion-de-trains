@startuml
'''ALT+D'''
class Gare {
  nom: string
  adresse: string
  ville: string 
  __
  GMT: TimeZone
}

class Gare
note left: key: {nom, ville} 

class Hotel {
  nom: string
  adresse: string
}

class Taxi {
  num: int
  tel: int
}

class Transport_Public {
  num: int
}

class Train {
  num: int
}


class Type {
  nom: string
  nb_places: int
  classe: Classe_train
  vitesse: int
}

class ArretLigne {
  num_arret: int
  arrive: boolean
}

class ArretVoyage {
  num_arret: int
  heure_depart: time
  heure_arrive: time
}

class ArretTrajet {
  depart: boolean
}

class Ligne {
  num: int {key}
}



class Voyage {
}


class Calendrier {
  date_debut: date
  date_fin: date
  horaire: time
  date_exception: ??
  hebdomadaire: ?? 
}

class Voyageur {
  nom: string
  prenom: string
  adresse: string
  telephone: string
  paiement: Paiement
}

class Occasionnel {

}

class Regulier {
  carte: int
  statut: Statut
}

Voyageur <|-- Occasionnel
Voyageur <|-- Regulier


class Billet {
  assurance: boolean
  prix: int
}

class Trajet {
  num_place: int
}

class Trajet
note left: condition sur nb_places


class Classe_train << enumeration >> {
  pre_sec
  sec
}

class Paiement << enumeration >> {
  carte
  chèque
  monnaie
}

class Statut << enumeration >> {
  bronze
  silver
  gold
  platine
}

Gare "1..n" -- "0..n" Hotel : dispose_de >
Gare "1..n" -- "0..n" Taxi : dispose_de >
Gare "1..n" -- "0..n" Transport_Public : dessert <

Gare "1" -- "0..n" ArretLigne : comprend >
ArretLigne "1..n" -- "1" Ligne : est_composée_de <
ArretLigne "1..n" -- "1" ArretVoyage : compose >
ArretVoyage "1..n" -- "1" Voyage : se_compose_de <
ArretVoyage "2" -- "0..n" Trajet : contient <
(ArretVoyage, Trajet) .. ArretTrajet

Ligne "0..n" -- "1" Type : est_assurée_par >
Train "0..n" -- "1" Type : est_de_type >
Train "1" -- "0..n" Voyage: est_pourvu <
Voyage "0..n" -- "1" Calendrier : est_programmé_par >


Billet "1..n" -- "1..n" Trajet : est_composé_de >
Voyageur "1" -- "0..n" Billet : possède >
@enduml
